from gmpy2 import *

long_to_bytes=lambda N:bytes.fromhex(hex(N)[2:])

def solve_3(km,kc,N3):
    p=gcd(pow(km,7)-kc,N3)
    assert p-1
    q=N3//p
    phi=(p-1)*(q-1)
    s=3
    while s<1024:
        if is_prime(s) and (gcd(s,p-1) == 1):
            sinv = invert(s,p-1)
            e = 4*s*sinv+3
            if(gcd(phi,e) == 1) and pow(km,e,N3)==kc:
                break
        s+=1
    return invert(e,phi)

def step2(os,d):
    for delta_1 in range(1,1024):
        for delta_2 in range(1,1024):
            Delta=pow(d-delta_1*delta_2,2)-4*os*delta_1*delta_2
            if Delta>=0:
                sd,b=iroot(Delta,2)
                if b:
                    s=(d-delta_1*delta_2-sd)//(2*delta_1)
                    if is_prime(s):
                        return s

def solve_2(os,tu):
    s=step2(os,tu-os)
    assert not os%s
    o=os//s
    t = next_prime(o)
    u = next_prime(s)
    assert t*u==tu
    phi=(o-1)*(s-1)*(t-1)*(u-1)
    return invert(65537,phi)

def solve_1(N1):
    bot,b=iroot(N1//1323,4)
    while 1:
        bot-=1
        if is_prime(bot) and not N1%bot:
            y=next_prime(21*bot)
            z=next_prime(3*bot*y)
            if bot*y*z==N1:
                break
    phi=(bot-1)*(y-1)*(z-1)
    return invert(65537,phi)

def solve():
    #level 3
    km=81225738828166640599054154023183465870678960906769673605358084529196871174429427936591822589995476552044227730868809310992934103731850597399114246762836121101348301079296663951503688072299542357013093324718850936925265954204973634470836187733828189312553819810470405246669124171178070485118436102895117354417
    kc=22238585749689335043198360403653248049710943304594623939441271714322821476047298977043454290592085809700500599520080107736858423927071836758485527270617538166045213386679961664240306883126224169183649140929168343634245637578487850945986688768857954082116136864696582066988005306045105860368497626822666433678879698344619056273526837700698315346972423482713305543394110949178233504551465821354514535155389087138867576532139739270960823294873497825040963862751772914087741831403951901
    N3=24502730939655407292543436897382196297516664227273320602397906878696723372242877776550446563950867624819352853122033114711732125433588724779869985477495098802744344448915032607469954642257825855931872281908232331623829725043031800535739432133948607448362641204034546581444904408754892037110031202573463399201625812005615264689877537231974023870006792196961829162058446662172634212427186470724599941352830546043772969297733239518604749366684163813795999625784931375110137805143337329
    d3=solve_3(km,kc,N3)
    c3=2385064917660948806957457681641614888669217960607006360543268900921017481245498563263991410918604891314384810533439253814523067168636768976220059028108900592323119524657903364697700329145453517769093265052715204625870232288203427545150983037310876534801548309890853026234248412421497939811385725642492104262954059677793538707604205179344884142656842895567795000647837461835179395742399372683460208271310884657279893532539121893558143029933794905470899127632780110459122203796256514
    c2=pow(c3,d3,N3)
    #level 2
    os=2966384769329081457959929210854946307725303451729041111756565081822209869706734847077404063837454548238096227843381458842322035116059935545789370388767999132347222281376931478665079
    N2=8799438599707547810413590252769637047669730373282934937368515093438977181200080057948977998859737775815535703211966248578669447308370171323881776611030752648135480196879162497896464322936833458775227550623435000527614781055524145936353357662536280470664112516976033358499330391929435857811788923590666783090016628619936968367309955759172412259970189158362661969
    d2=solve_2(os,N2//os)
    c1=pow(c2,d2,N2)
    #level 1
    N1=7296833146437859657873621309783663953888975990236533231501856312811032923469834028894995888763882827280881148914714991084488173289859941577252999932599209531912854472326211936264815965582591809770319779712527572174152560819828597241583278731544411246154674514626001858732363262751244419415544407653873858309154132440262888841600498885105451586030156787
    d1=solve_1(N1)
    return long_to_bytes(pow(c1,d1,N1))[:-100]

if __name__=='__main__':
    print(solve().decode())
