from Crypto.Util.number import *
from string import ascii_letters,digits

N=598756982846857855564861803797067906933452532971372536192231
p=773793889124783574343613279393
q=773793889124783574343562335367
C=4480960863875584511148612202888184984874434295853921
P1=(40868726519566019162794925971370501749760105301423309229554,54687980868371628310908123178978977864897123871328723)
P2=(235149117685317066108245267690004572936544028030457002179126,1289371238921298371232163781261298731812137628190)
P3=(230807308713660443214609900462802224133677339138938919914236,15979270783196203822523802015845150885928738960540101206481)
P4=(48539794908526618490272854315619275063139157075919926757183,253317587580758121061061480314672531383057603048054780326781)

def cal_AB(N,C,P1,P2):
    X1,Y1=P1
    X2,Y2=P2
    A=Mod(inverse(X1,N)*(power_mod(Y1,2,N)-power_mod(X1,3,N)-C),N)
    B=Mod(power_mod(Y2,2,N)-power_mod(X2,3,N)-A*X2,N)
    return A,B

def dis_log(point,base):
    xp=discrete_log(Ep(point),Ep(base),operation='+')
    xq=discrete_log(Eq(point),Eq(base),operation='+')
    return long_to_bytes(crt([ZZ(xp),ZZ(xq)],[ZZ(Ep(point).order()),ZZ(Eq(point).order())]))

def solve():
    assert p*q==N
    A,B=cal_AB(N,C,P1,P2)
    global Ep,Eq
    Ep=EllipticCurve(GF(p),[A,B])
    Eq=EllipticCurve(GF(q),[A,B])
    return dis_log(P3,P2)+dis_log(P4,P2)

if __name__=='__main__':
    print solve()
